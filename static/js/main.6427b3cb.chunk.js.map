{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list-component.jsx","components/search-box/search.box.compont.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","bind","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SAEaA,EAAK,SAAAC,GAAK,OACnB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAML,EAAMI,QAAQE,KAApB,OACA,4BAAIN,EAAMI,QAAQG,YCFbC,G,MAAU,SAAAR,GAAK,OAC1B,qBAAKC,UAAU,YAAf,SAEMD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC1B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLdM,G,MAAU,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACnB,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EACrDG,SAAUF,MC8CCG,G,wDA9Cb,aAAc,IAAD,8BACX,gBAgBFH,aAAa,SAAAI,GACX,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAdpC,EAAKC,MAAM,CACTb,SAAS,GACTU,YAAY,IAEd,EAAKN,aAAa,EAAKA,aAAaU,KAAlB,gBARP,E,qDAUb,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAKA,EAASC,UAC3BF,MAAK,SAAAG,GAAK,OAAE,EAAKV,SAAS,CAACT,SAASmB,S,oBASvC,WACA,MAE6BC,KAAKP,MAA3Bb,EAFP,EAEOA,SAASU,EAFhB,EAEgBA,YACVW,EAAiBrB,EAASsB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQE,KAAK0B,cAAcC,SAASd,EAAYa,kBAI9C,OACA,sBAAK/B,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAcgB,KAAKhB,eAE5D,cAAC,EAAD,CAAUJ,SAAUqB,W,GArCRI,cCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6427b3cb.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card-styles.css';\r\nexport const Card=props=>(\r\n    <div className=\"card-container\">\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n        <h2> {props.monster.name} </h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport {Card} from '../card/card.component';\r\nimport './card-list-style.css';\r\n\r\nexport const CardList= props =>(\r\n  <div className='card-list'>\r\n       {\r\n        props.monsters.map(monster =>(\r\n        <Card key={monster.id} monster={monster}/>\r\n        ))\r\n        }\r\n      \r\n\r\n\r\n</div>\r\n);\r\n     ","import React from 'react';\r\nimport './search-box.style.css';\r\n\r\nexport const SearchBox=({placeholder,handleChange})=>(\r\n    <input className='search' type='search' placeholder={placeholder}\r\n    onChange={handleChange} \r\n    />\r\n\r\n)\r\n","import React,{ Component } from 'react';\nimport {CardList} from './components/card-list/card-list-component';\nimport {SearchBox} from './components/search-box/search.box.compont';\nimport './App.css';\nclass App extends Component{\n  constructor(){\n    super();\n\n\n    this.state={\n      monsters:[],\n      searchField:''\n    };\n    this.handleChange=this.handleChange.bind(this);\n  }\n  componentDidMount(){       \n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response  => response.json())\n    .then(users=>this.setState({monsters:users}))\n    \n  };\n\n  handleChange=e=>{\n    this.setState({searchField:e.target.value});\n   \n  }; \n  \n  render()\n  {\n  // when we click that is when set_sate is called render method is again called\n  const {monsters,searchField}=this.state;\n  const filteredMonsters=monsters.filter(monster=>\n  monster.name.toLowerCase().includes(searchField.toLowerCase())\n  );\n  \n\n    return(\n    <div className=\"App\">\n      <h1> MONSTERS ROLODEX </h1>\n      <SearchBox placeholder='Search Monsters' handleChange={this.handleChange}\n   />\n      <CardList monsters={filteredMonsters}/>\n\n     \n    \n  </div>\n  );\n}\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}